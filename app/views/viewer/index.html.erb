<div id="UrlView">
    <h4><span id="title">Hover over bars to view data</span></h4>
    <h4><span id="url">(Click on a bar to follow a url)</span></h4>
</div>
<div id="viewer">
    <svg height="500" width="800"></svg>
</div>
<script src="https://d3js.org/d3.v3.min.js"></script>
<script>
$(document)

    .on("mouseenter", "rect", function() {
        this.style.cursor = 'pointer';
        var currentTitle = this.id;
        var currentUrl = this.getAttribute("class");
        $('#url').text(currentUrl);
        $('#title').text(currentTitle);

    }).on('click', "rect", function(e) {
        e.preventDefault();
        window.location.assign($('#url').text());
    });

function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return "100";
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

var type = getParameterByName('type');
var url = getParameterByName('url');
var keyword = getParameterByName('keyword');
var max = getParameterByName('max');

// Check if optional params are present

// tooltip data
var canvas = d3.select('svg');
// https://api.myjson.com/bins/gl1c1
// https://api.myjson.com/bins/v1vc1
//scrapyUrl = "http://127.0.0.1:5000/"+type+"/url/"+url+"/max/"+max+"/keyword/"+keyword+"";
//console.log("https://api.myjson.com/bins/v1vc1");

var somevalue = d3.json("https://api.myjson.com/bins/gl1c1", function(data) {

    function rand(min, max) {
        return Math.round(Math.random() * (max - min) + min);
    }
    //console.log(data[i].urlDict.searching);
    //console.log(data[i].urlDict.searching.length);
    //console.log(data[i].title[0]);
    //console.log(data[0].latency);

    // Get number of items
    // get width of viewing area.
    var viewWidth = "800";
    var viewHeight = "500";

    var margin = 4;

    // get size of array
    var totalLinks = data.length
    // reduce totalLinks for necessary spacing in this case 4px 
    var spacing = totalLinks * (margin);
    // determine number of objects 
    var numObjects = totalLinks;
    // Get object width
    var objectWidth = Math.floor((viewWidth - spacing) / numObjects);

    var rectangleData = [];
    var height = Math.round(data[0].latency * 400)

    rectangleData.push({
        x: '0',
        y: viewHeight - height,
        width: objectWidth,
        height: height,
        c: 'rgb(' + rand(0, 255) + ', ' + rand(0, 255) + ', ' + rand(0, 255) + ')',
        url: data[0].urlDict.searching,
        title: data[0].title
    });

    var xValue;
    for (var i = 1; i < numObjects; i++) {

        // calculate Position:
        xValue = Math.round(((rectangleData[i - 1].width + (margin * 1.1)) * i));

        // Calculate Height - based on latency download
        height = Math.round(data[i].latency * 400);

        // draw the scene and delay after an element is added.
        rectangleData.push({
            x: xValue,
            y: viewHeight - height,
            width: objectWidth,
            height: height,
            c: 'rgb(' + rand(0, 255) + ', ' + rand(0, 255) + ', ' + rand(0, 255) + ')',
            url: data[i].urlDict.searching,
            title: data[i].title
        });
    }

    // draw the scene
    draw();

    function draw(rect) {
        var rectangles = canvas.selectAll('rect').data(rectangleData);
        rectangles
            .enter()
            .append('rect')
            .attr('x', function(d) {
                return d.x;
            })
            .attr('y', 500)
            .attr('fill', function(d) {
                return d.c;
            })
            .attr('width', function(d) {
                return d.width;
            })
            .attr('height', 0)
            .transition()
            .duration(3000)
            .attr('height', function(d) {
                return d.height;
            })
            .attr('y', function(d) {
                return d.y;
            })
            .attr('stroke-width', .5)
            .attr('stroke', '#FFFFFF')

            .attr('id', function(d) {
                return d.title;
            })

            .attr('class', function(d) {
                return d.url;
            })
    }
});
</script>
<div id="view-controls">
    <button class="btn btn-warning btn-lg">RESET</button>
</div>
<script>
document.getElementById("view_nav").classList.add("active")
</script>